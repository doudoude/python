Python  courser michigan 
Introduction to data science in python
1.	定义函数
def add_numbers(x, y, z=None, flag=False):
    if (flag):
        print('Flag is true!')
    if (z==None):
        return x + y
    else:
        return x + y + z
    
print(add_numbers(1, 2, flag=True))

把函数赋给变量：
def add_numbers(x,y):
    return x+y

a = add_numbers
a(1,2)

在另一个py文件中引入自己写的py文件：
import sys
sys.path.append('E:\data science学习\python demo')      #添加被引入文件的位置

from const import PI               #从被引用文件中引入变量

def calc_round_area(radius):
    return PI * (radius ** 2)

def main():
    print("round area: ", calc_round_area(2))

main()

if __name__ == '__main__'的意思是：当.py文件被直接运行时，if __name__ == '__main__'之下的代码块将被运行；
当.py文件以模块形式被导入时，if __name__ == '__main__'之下的代码块不被运行。

2.numpy
>>> import numpy as np
>>> a=np.sum([[0,1,2],[2,1,3]])                #直接sum全部
>>> a
9
>>> a.shape
()
>>> a=np.sum([[0,1,2],[2,1,3]],axis=0)            #axis=0之间相加
>>> a
array([2, 2, 5])
>>> a.shape
(3,)
>>> a=np.sum([[0,1,2],[2,1,3]],axis=1)          #axis=1内部相加
>>> a
array([3, 6])
>>> a.shape
(2,)

argsort函数返回的是数组值从小到大的索引值

2.	数据类型
x = (1, 'a', 2, 'b')
type(x)

输出tuple

x = [1, 'a', 2, 'b']
type(x)

输出list

3.	x.append(3.3)                  %向列表里添加值
print(x)

4.	用循环输出列表元素
for item in x:
print(item)              
等价于
i=0
while( i != len(x) ):
    print(x[i])
i = i + 1
5.	字符串操作：
firstname = 'Christopher Arthur,Hansen Brooks'.split(',')[0] 
lastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1] 
print(firstname)
print(lastname)
print(‘Chri’in firstname) 输出True
输出：Christopher Arthur 
Brooks

%split()是函数，单引号里是分隔符，默认空格，返回列表

6.	'Chris' + str(2)    输出Chris2
若不加str()，报错。一定要转换格式后再加
7.	字典：
x = {'Christopher Brooks': 'brooksch@umich.edu', 'Bill Gates': 'billg@microsoft.com'}
x['Christopher Brooks'] # Retrieve a value by using the indexing operator

for name in x:                %直接x表示key  也能x.keys()
print(x[name])

for email in x.values():           %.values()表示值
    print(email)

for name, email in x.items():        %items()表示全部
    print(name)
    print(email)
8.	多个同时赋值
x = ('Christopher', 'Brooks', 'brooksch@umich.edu')
fname, lname, email = x
dict.get(key, default=None)  Python 字典(Dictionary) get() 函数返回指定键的值，如果值不在字典中返回默认值。
9.	Format用列表填充{ }里的内容
sales_record = {
'price': 3.24,
'num_items': 4,
'person': 'Chris'}

sales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'

print(sales_statement.format(sales_record['person'],
                             sales_record['num_items'],
                             sales_record['price'],
                             sales_record['num_items']*sales_record['price']))
10.	清除所有变量
%reset _f
11.	时间
import datetime as dt
import time as tm

dtnow = dt.datetime.fromtimestamp(tm.time())
dtnow

dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second # get year, month, day, etc.from a datetime
12.	计算时间差：
delta = dt.timedelta(days = 100) # create a timedelta of 100 days
Delta                        %差值为100天

today = dt.date.today()
today - delta # the date 100 days ago
13.	建立类：
class Person:
    department = 'School of Information' #a class variable

    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location
建立对象：
person = Person()
person.set_name('Christopher Brooks')
person.set_location('Ann Arbor, MI, USA')
print('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))

14.	Map
store1 = [10.00, 11.00, 12.34, 2.34]
store2 = [9.00, 11.10, 12.34, 2.01]
cheapest = map(min, store1, store2)      % map(函数，参数1，参数2)

for item in cheapest:
print(item)
输出：9.0
11.0
12.34
2.01

15.	Lambda
my_function = lambda a, b, c : a + b   参数：函数
my_function(1, 2, 3)
16.	0，1000的偶数：
17.	my_list = []
for number in range(0, 1000):
    if number % 2 == 0:
        my_list.append(number)
my_list

写到一行：
my_list = [number for number in range(0,1000) if number % 2 == 0]
my_list

18.	numpy
生成numpy array:
mylist = [1, 2, 3]
x = np.array(mylist)
y = np.array([4, 5, 6])
m = np.array([[7, 8, 9], [10, 11, 12]])     %
输出：array([[ 7,  8,  9],
       [10, 11, 12]])
np.array([1, 2, 3] * 3)     # array([1, 2, 3, 1, 2, 3, 1, 2, 3])
np.repeat([1, 2, 3], 3)        # array([1, 1, 1, 2, 2, 2, 3, 3, 3])
m.shape  #查看shape

n = np.arange(0, 30, 2) # start at 0 count up by 2, stop before 30
m= n.reshape(3, 5)  #n不变，m为重排矩阵
n.resize(3, 5)          #n本身变掉了
o = np.linspace(0, 4, 9) # return 9 evenly spaced values from 0 to 4 #linespace(a,b,n) 在[a,b]上均匀取N个值

初值矩阵：
Np.ones((3,2))    np.zeros((3,2))        np.eye(3) 
取对角线值：  np.diag(y)
19.	对array进行操作：
p = np.ones([2, 3], int)    定义生成的array类型

Use vstack to stack arrays in sequence vertically (row wise).
np.vstack([p, 2*p])
输出
array([[1, 1, 1],
       [1, 1, 1],
       [2, 2, 2],
       [2, 2, 2]])

Use hstack to stack arrays in sequence horizontally (column wise).
np.hstack([p, 2*p])
输出：array([[1, 1, 1, 2, 2, 2],
       [1, 1, 1, 2, 2, 2]])
x=np.array([1,2,3])
y=np.array([4,5,6])

print(x + y) # elementwise addition     [1 2 3] + [4 5 6] = [5  7  9]
print(x - y) # elementwise subtraction  [1 2 3] - [4 5 6] = [-3 -3 -3]
如果是x=[1,2,3] 的list格式，则x+y为【1，2，3，4，5，6】

x.dot(y) # dot product  1*4 + 2*5 + 3*6    点乘
z = np.array([y, y**2])
z.T            转置
z.dtype         查看类型
z = z.astype('f')       转换类型

a = np.array([-4, -2, 1, 3, 5])
函数运算
a.sum()    a.mean()    a.std()

a.	argmax()  
argmax and argmin return the index of the maximum and minimum values in the array.


20.	选取：
array[start:stop:stepsize]
x=[0,1,2,3,4,5,6]
x[1::2]         没有stop就空着
对于矩阵，:stepsize加在需要间隔取的部分后面
比如r[-1, :5:2]  对0：5列间隔取
21.	Imunerate可以输出索引和内容
for i, row in enumerate(test):
print('row', i, 'is', row)













